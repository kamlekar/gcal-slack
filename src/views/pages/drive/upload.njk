{% extends "layouts/base.njk" %}

{% block head_end %}
<style>
  .awesomplete [hidden] {
      display: none;
  }

  .awesomplete .visually-hidden {
      position: absolute;
      clip: rect(0, 0, 0, 0);
  }

  .awesomplete {
      /* display: inline-block; */ /* custom */
      position: relative;
      flex: auto; /* custom */
  }

  .awesomplete > input {
      display: block;
  }

  .awesomplete > ul {
      position: absolute;
      left: 0;
      z-index: 2; /* custom */
      min-width: 100%;
      box-sizing: border-box;
      list-style: none;
      padding: 0;
      margin: 0;
      background: #fff;
  }

  .awesomplete > ul:empty {
      display: none;
  }

  .awesomplete > ul {
    border-radius: .3em;
    margin: .2em 0 0;
    background: hsla(0,0%,100%,.9);
    background: linear-gradient(to bottom right, white, hsla(0,0%,100%,.8));
    border: 1px solid rgba(0,0,0,.3);
    box-shadow: .05em .2em .6em rgba(0,0,0,.2);
    text-shadow: none;
  }

  @supports (transform: scale(0)) {
    .awesomplete > ul {
      transition: .3s cubic-bezier(.4,.2,.5,1.4);
      transform-origin: 1.43em -.43em;
    }
    
    .awesomplete > ul[hidden],
    .awesomplete > ul:empty {
      opacity: 0;
      transform: scale(0);
      display: block;
      transition-timing-function: ease;
    }
  }

    /* Pointer */
    .awesomplete > ul:before {
      content: "";
      position: absolute;
      top: -.43em;
      left: 1em;
      width: 0; height: 0;
      padding: .4em;
      background: white;
      border: inherit;
      border-right: 0;
      border-bottom: 0;
      -webkit-transform: rotate(45deg);
      transform: rotate(45deg);
    }

    .awesomplete > ul > li {
      position: relative;
      padding: .2em .5em;
      cursor: pointer;
    }
    
    .awesomplete > ul > li:hover {
      background: hsl(200, 40%, 80%);
      color: black;
    }
    
    .awesomplete > ul > li[aria-selected="true"] {
      background: hsl(205, 40%, 40%);
      color: white;
    }
    
      .awesomplete mark {
        background: hsl(65, 100%, 50%);
      }
      
      .awesomplete li:hover mark {
        background: hsl(68, 100%, 41%);
      }
      
      .awesomplete li[aria-selected="true"] mark {
        background: hsl(86, 100%, 21%);
        color: inherit;
      }
  /*# sourceMappingURL=awesomplete.css.map */

</style>
<style>
  .loader {
    width: 48px;
    height: 48px;
    position: relative;
  }
  .loader::before , .loader::after{
    content: '';
    position: absolute;
    left: 50%;
    top: 50%;
    transform: translate(-50% , -50%);
    width: 48em;
    height: 48em;
    background-image:
      radial-gradient(circle 10px, #FFF 100%, transparent 0),
      radial-gradient(circle 10px, #FFF 100%, transparent 0),
      radial-gradient(circle 10px, #FFF 100%, transparent 0),
      radial-gradient(circle 10px, #FFF 100%, transparent 0),
      radial-gradient(circle 10px, #FFF 100%, transparent 0),
      radial-gradient(circle 10px, #FFF 100%, transparent 0),
      radial-gradient(circle 10px, #FFF 100%, transparent 0),
      radial-gradient(circle 10px, #FFF 100%, transparent 0);
    background-position: 0em -18em, 0em 18em, 18em 0em, -18em 0em,
                        13em -13em, -13em -13em, 13em 13em, -13em 13em;
      background-repeat: no-repeat;
    font-size: 0.5px;
    border-radius: 50%;
    animation: blast 1s ease-in infinite;
  }
  .loader::after {
    font-size: 1px;
    background: #fff;
    animation: bounce 1s ease-in infinite;
  }

  @keyframes bounce {
    0% , 100%{ font-size: 0.75px }
    50% { font-size: 1.5px }
  }
  @keyframes blast {
    0% , 40% {
      font-size: 0.5px;
    }
    70% {
      opacity: 1;
      font-size: 4px;
    }
    100% {
      font-size: 6px;
      opacity: 0;
    }
  }
</style>
<style>
  .custom-fade {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    z-index: 1000;
    background-color: rgba(0,0,0,.8);
    display: flex;
    align-items: center;
    justify-content: center;
  }
</style>
<style>
  .background {
    position: absolute;
    width: 100%;
    height: 100%;
    top: 0;
    left: 0;
    background: linear-gradient(transparent, rgba(0,0,0,0.5)), url("https://images.pexels.com/photos/4827/nature-forest-trees-fog.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=750&w=1260");
    background-size: cover;
    background-position: center;
  }
  .modalbox.success,
  .modalbox.error {
    box-shadow: 0 1px 3px rgba(0,0,0,0.12), 0 1px 2px rgba(0,0,0,0.24);
    transition: all 0.3s cubic-bezier(0.25, 0.8, 0.25, 1);
    -webkit-border-radius: 2px;
    -moz-border-radius: 2px;
    border-radius: 2px;
    background: #fff;
    padding: 25px 25px 15px;
    text-align: center;
  }
  .modalbox.success.animate .icon,
  .modalbox.error.animate .icon {
    -webkit-animation: fall-in 0.75s;
    -moz-animation: fall-in 0.75s;
    -o-animation: fall-in 0.75s;
    animation: fall-in 0.75s;
    box-shadow: 0 1px 3px rgba(0,0,0,0.12), 0 1px 2px rgba(0,0,0,0.24);
  }
  .modalbox.success h1,
  .modalbox.error h1 {
    font-family: 'Montserrat', sans-serif;
  }
  .modalbox.success p,
  .modalbox.error p {
    font-family: 'Open Sans', sans-serif;
  }
  .modalbox.success button,
  .modalbox.error button,
  .modalbox.success button:active,
  .modalbox.error button:active,
  .modalbox.success button:focus,
  .modalbox.error button:focus {
    -webkit-transition: all 0.1s ease-in-out;
    transition: all 0.1s ease-in-out;
    -webkit-border-radius: 30px;
    -moz-border-radius: 30px;
    border-radius: 30px;
    margin-top: 15px;
    width: 80%;
    background: transparent;
    color: #4caf50;
    border-color: #4caf50;
    outline: none;
  }
  .modalbox.success button:hover,
  .modalbox.error button:hover,
  .modalbox.success button:active:hover,
  .modalbox.error button:active:hover,
  .modalbox.success button:focus:hover,
  .modalbox.error button:focus:hover {
    color: #fff;
    background: #4caf50;
    border-color: transparent;
  }
  .modalbox.success .icon,
  .modalbox.error .icon {
    position: relative;
    margin: 0 auto;
    margin-top: -75px;
    background: #4caf50;
    height: 100px;
    width: 100px;
    border-radius: 50%;
  }
  .modalbox.success .icon span,
  .modalbox.error .icon span {
    postion: absolute;
    font-size: 4em;
    color: #fff;
    text-align: center;
    padding-top: 20px;
  }
  .modalbox.error button,
  .modalbox.error button:active,
  .modalbox.error button:focus {
    color: #f44336;
    border-color: #f44336;
  }
  .modalbox.error button:hover,
  .modalbox.error button:active:hover,
  .modalbox.error button:focus:hover {
    color: #fff;
    background: #f44336;
  }
  .modalbox.error .icon {
    background: #f44336;
  }
  .modalbox.error .icon span {
    padding-top: 25px;
  }
  .center {
    float: none;
    margin-left: auto;
    margin-right: auto;
  /* stupid browser compat. smh */
  }
  .center .change {
    clearn: both;
    display: block;
    font-size: 10px;
    color: #ccc;
    margin-top: 10px;
  }
  @-webkit-keyframes fall-in {
    0% {
      -ms-transform: scale(3, 3);
      -webkit-transform: scale(3, 3);
      transform: scale(3, 3);
      opacity: 0;
    }
    50% {
      -ms-transform: scale(1, 1);
      -webkit-transform: scale(1, 1);
      transform: scale(1, 1);
      opacity: 1;
    }
    60% {
      -ms-transform: scale(1.1, 1.1);
      -webkit-transform: scale(1.1, 1.1);
      transform: scale(1.1, 1.1);
    }
    100% {
      -ms-transform: scale(1, 1);
      -webkit-transform: scale(1, 1);
      transform: scale(1, 1);
    }
  }
  @-moz-keyframes fall-in {
    0% {
      -ms-transform: scale(3, 3);
      -webkit-transform: scale(3, 3);
      transform: scale(3, 3);
      opacity: 0;
    }
    50% {
      -ms-transform: scale(1, 1);
      -webkit-transform: scale(1, 1);
      transform: scale(1, 1);
      opacity: 1;
    }
    60% {
      -ms-transform: scale(1.1, 1.1);
      -webkit-transform: scale(1.1, 1.1);
      transform: scale(1.1, 1.1);
    }
    100% {
      -ms-transform: scale(1, 1);
      -webkit-transform: scale(1, 1);
      transform: scale(1, 1);
    }
  }
  @-o-keyframes fall-in {
    0% {
      -ms-transform: scale(3, 3);
      -webkit-transform: scale(3, 3);
      transform: scale(3, 3);
      opacity: 0;
    }
    50% {
      -ms-transform: scale(1, 1);
      -webkit-transform: scale(1, 1);
      transform: scale(1, 1);
      opacity: 1;
    }
    60% {
      -ms-transform: scale(1.1, 1.1);
      -webkit-transform: scale(1.1, 1.1);
      transform: scale(1.1, 1.1);
    }
    100% {
      -ms-transform: scale(1, 1);
      -webkit-transform: scale(1, 1);
      transform: scale(1, 1);
    }
  }
  @-webkit-keyframes plunge {
    0% {
      margin-top: -100%;
    }
    100% {
      margin-top: 25%;
    }
  }
  @-moz-keyframes plunge {
    0% {
      margin-top: -100%;
    }
    100% {
      margin-top: 25%;
    }
  }
  @-o-keyframes plunge {
    0% {
      margin-top: -100%;
    }
    100% {
      margin-top: 25%;
    }
  }
  @-moz-keyframes fall-in {
    0% {
      -ms-transform: scale(3, 3);
      -webkit-transform: scale(3, 3);
      transform: scale(3, 3);
      opacity: 0;
    }
    50% {
      -ms-transform: scale(1, 1);
      -webkit-transform: scale(1, 1);
      transform: scale(1, 1);
      opacity: 1;
    }
    60% {
      -ms-transform: scale(1.1, 1.1);
      -webkit-transform: scale(1.1, 1.1);
      transform: scale(1.1, 1.1);
    }
    100% {
      -ms-transform: scale(1, 1);
      -webkit-transform: scale(1, 1);
      transform: scale(1, 1);
    }
  }
  @-webkit-keyframes fall-in {
    0% {
      -ms-transform: scale(3, 3);
      -webkit-transform: scale(3, 3);
      transform: scale(3, 3);
      opacity: 0;
    }
    50% {
      -ms-transform: scale(1, 1);
      -webkit-transform: scale(1, 1);
      transform: scale(1, 1);
      opacity: 1;
    }
    60% {
      -ms-transform: scale(1.1, 1.1);
      -webkit-transform: scale(1.1, 1.1);
      transform: scale(1.1, 1.1);
    }
    100% {
      -ms-transform: scale(1, 1);
      -webkit-transform: scale(1, 1);
      transform: scale(1, 1);
    }
  }
  @-o-keyframes fall-in {
    0% {
      -ms-transform: scale(3, 3);
      -webkit-transform: scale(3, 3);
      transform: scale(3, 3);
      opacity: 0;
    }
    50% {
      -ms-transform: scale(1, 1);
      -webkit-transform: scale(1, 1);
      transform: scale(1, 1);
      opacity: 1;
    }
    60% {
      -ms-transform: scale(1.1, 1.1);
      -webkit-transform: scale(1.1, 1.1);
      transform: scale(1.1, 1.1);
    }
    100% {
      -ms-transform: scale(1, 1);
      -webkit-transform: scale(1, 1);
      transform: scale(1, 1);
    }
  }
  @keyframes fall-in {
    0% {
      -ms-transform: scale(3, 3);
      -webkit-transform: scale(3, 3);
      transform: scale(3, 3);
      opacity: 0;
    }
    50% {
      -ms-transform: scale(1, 1);
      -webkit-transform: scale(1, 1);
      transform: scale(1, 1);
      opacity: 1;
    }
    60% {
      -ms-transform: scale(1.1, 1.1);
      -webkit-transform: scale(1.1, 1.1);
      transform: scale(1.1, 1.1);
    }
    100% {
      -ms-transform: scale(1, 1);
      -webkit-transform: scale(1, 1);
      transform: scale(1, 1);
    }
  }
  @-moz-keyframes plunge {
    0% {
      margin-top: -100%;
    }
    100% {
      margin-top: 15%;
    }
  }
  @-webkit-keyframes plunge {
    0% {
      margin-top: -100%;
    }
    100% {
      margin-top: 15%;
    }
  }
  @-o-keyframes plunge {
    0% {
      margin-top: -100%;
    }
    100% {
      margin-top: 15%;
    }
  }
  @keyframes plunge {
    0% {
      margin-top: -100%;
    }
    100% {
      margin-top: 15%;
    }
  }

</style>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
  /**
    * Simple, lightweight, usable local autocomplete library for modern browsers
    * Because there weren’t enough autocomplete scripts in the world? Because I’m completely insane and have NIH syndrome? Probably both. :P
    * @author Lea Verou http://leaverou.github.io/awesomplete
    * MIT license
    */

  (function () {

  var _ = function (input, o) {
    var me = this;

      // Keep track of number of instances for unique IDs
      _.count = (_.count || 0) + 1;
      this.count = _.count;

    // Setup

    this.isOpened = false;

    this.input = $(input);
    this.input.setAttribute("autocomplete", "off");
    this.input.setAttribute("aria-expanded", "false");
    this.input.setAttribute("aria-owns", "awesomplete_list_" + this.count);
    this.input.setAttribute("role", "combobox");

    // store constructor options in case we need to distinguish
    // between default and customized behavior later on
    this.options = o = o || {};

    configure(this, {
      minChars: 2,
      maxItems: 10,
      autoFirst: false,
      data: _.DATA,
      filter: _.FILTER_CONTAINS,
      sort: o.sort === false ? false : _.SORT_BYLENGTH,
      container: _.CONTAINER,
      item: _.ITEM,
      replace: _.REPLACE,
      tabSelect: false,
      listLabel: "Results List"
    }, o);

    this.index = -1;

    // Create necessary elements

    this.container = this.container(input);

    this.ul = $.create("ul", {
      hidden: "hidden",
          role: "listbox",
          id: "awesomplete_list_" + this.count,
      inside: this.container,
      "aria-label": this.listLabel
    });

    this.status = $.create("span", {
      className: "visually-hidden",
      role: "status",
      "aria-live": "assertive",
          "aria-atomic": true,
          inside: this.container,
          textContent: this.minChars != 0 ? ("Type " + this.minChars + " or more characters for results.") : "Begin typing for results."
    });

    // Bind events

    this._events = {
      input: {
        "input": this.evaluate.bind(this),
        "blur": this.close.bind(this, { reason: "blur" }),
        "keydown": function(evt) {
          var c = evt.keyCode;

          // If the dropdown `ul` is in view, then act on keydown for the following keys:
          // Enter / Esc / Up / Down
          if(me.opened) {
            if (c === 13 && me.selected) { // Enter
              evt.preventDefault();
              me.select(undefined, undefined, evt);
            }
            else if (c === 9 && me.selected && me.tabSelect) {
              evt.preventDefault();
              me.select(undefined, undefined, evt);
            }
            else if (c === 27) { // Esc
              me.close({ reason: "esc" });
            }
            else if (c === 38 || c === 40) { // Down/Up arrow
              evt.preventDefault();
              me[c === 38? "previous" : "next"]();
            }
          }
        }
      },
      form: {
        "submit": this.close.bind(this, { reason: "submit" })
      },
      ul: {
        // Prevent the default mousedowm, which ensures the input is not blurred.
        // The actual selection will happen on click. This also ensures dragging the
        // cursor away from the list item will cancel the selection
        "mousedown": function(evt) {
          evt.preventDefault();
        },
        // The click event is fired even if the corresponding mousedown event has called preventDefault
        "click": function(evt) {
          var li = evt.target;

          if (li !== this) {

            while (li && !/li/i.test(li.nodeName)) {
              li = li.parentNode;
            }

            if (li && evt.button === 0) {  // Only select on left click
              evt.preventDefault();
              me.select(li, evt.target, evt);
            }
          }
        }
      }
    };

    $.bind(this.input, this._events.input);
    $.bind(this.input.form, this._events.form);
    $.bind(this.ul, this._events.ul);

    if (this.input.hasAttribute("list")) {
      this.list = "#" + this.input.getAttribute("list");
      this.input.removeAttribute("list");
    }
    else {
      this.list = this.input.getAttribute("data-list") || o.list || [];
    }

    _.all.push(this);
  };

  _.prototype = {
    set list(list) {
      if (Array.isArray(list)) {
        this._list = list;
      }
      else if (typeof list === "string" && list.indexOf(",") > -1) {
          this._list = list.split(/\s*,\s*/);
      }
      else { // Element or CSS selector
        list = $(list);

        if (list && list.children) {
          var items = [];
          slice.apply(list.children).forEach(function (el) {
            if (!el.disabled) {
              var text = el.textContent.trim();
              var value = el.value || text;
              var label = el.label || text;
              if (value !== "") {
                items.push({ label: label, value: value });
              }
            }
          });
          this._list = items;
        }
      }

      if (document.activeElement === this.input) {
        this.evaluate();
      }
    },

    get selected() {
      return this.index > -1;
    },

    get opened() {
      return this.isOpened;
    },

    close: function (o) {
      if (!this.opened) {
        return;
      }

      this.input.setAttribute("aria-expanded", "false");
      this.ul.setAttribute("hidden", "");
      this.isOpened = false;
      this.index = -1;

      this.status.setAttribute("hidden", "");

      $.fire(this.input, "awesomplete-close", o || {});
    },

    open: function () {
      this.input.setAttribute("aria-expanded", "true");
      this.ul.removeAttribute("hidden");
      this.isOpened = true;

      this.status.removeAttribute("hidden");

      if (this.autoFirst && this.index === -1) {
        this.goto(0);
      }

      $.fire(this.input, "awesomplete-open");
    },

    destroy: function() {
      //remove events from the input and its form
      $.unbind(this.input, this._events.input);
      $.unbind(this.input.form, this._events.form);

      // cleanup container if it was created by Awesomplete but leave it alone otherwise
      if (!this.options.container) {
        //move the input out of the awesomplete container and remove the container and its children
        var parentNode = this.container.parentNode;

        parentNode.insertBefore(this.input, this.container);
        parentNode.removeChild(this.container);
      }

      //remove autocomplete and aria-autocomplete attributes
      this.input.removeAttribute("autocomplete");
      this.input.removeAttribute("aria-autocomplete");

      //remove this awesomeplete instance from the global array of instances
      var indexOfAwesomplete = _.all.indexOf(this);

      if (indexOfAwesomplete !== -1) {
        _.all.splice(indexOfAwesomplete, 1);
      }
    },

    next: function () {
      var count = this.ul.children.length;
      this.goto(this.index < count - 1 ? this.index + 1 : (count ? 0 : -1) );
    },

    previous: function () {
      var count = this.ul.children.length;
      var pos = this.index - 1;

      this.goto(this.selected && pos !== -1 ? pos : count - 1);
    },

    // Should not be used, highlights specific item without any checks!
    goto: function (i) {
      var lis = this.ul.children;

      if (this.selected) {
        lis[this.index].setAttribute("aria-selected", "false");
      }

      this.index = i;

      if (i > -1 && lis.length > 0) {
        lis[i].setAttribute("aria-selected", "true");

        this.status.textContent = lis[i].textContent + ", list item " + (i + 1) + " of " + lis.length;

              this.input.setAttribute("aria-activedescendant", this.ul.id + "_item_" + this.index);

        // scroll to highlighted element in case parent's height is fixed
        this.ul.scrollTop = lis[i].offsetTop - this.ul.clientHeight + lis[i].clientHeight;

        $.fire(this.input, "awesomplete-highlight", {
          text: this.suggestions[this.index]
        });
      }
    },

    select: function (selected, origin, originalEvent) {
      if (selected) {
        this.index = $.siblingIndex(selected);
      } else {
        selected = this.ul.children[this.index];
      }

      if (selected) {
        var suggestion = this.suggestions[this.index];

        var allowed = $.fire(this.input, "awesomplete-select", {
          text: suggestion,
          origin: origin || selected,
          originalEvent: originalEvent
        });

        if (allowed) {
          this.replace(suggestion);
          this.close({ reason: "select" });
          $.fire(this.input, "awesomplete-selectcomplete", {
            text: suggestion,
            originalEvent: originalEvent
          });
        }
      }
    },

    evaluate: function() {
      var me = this;
      var value = this.input.value;

      if (value.length >= this.minChars && this._list && this._list.length > 0) {
        this.index = -1;
        // Populate list with options that match
        this.ul.innerHTML = "";

        this.suggestions = this._list
          .map(function(item) {
            return new Suggestion(me.data(item, value));
          })
          .filter(function(item) {
            return me.filter(item, value);
          });

        if (this.sort !== false) {
          this.suggestions = this.suggestions.sort(this.sort);
        }

        this.suggestions = this.suggestions.slice(0, this.maxItems);

        this.suggestions.forEach(function(text, index) {
            me.ul.appendChild(me.item(text, value, index));
          });

        if (this.ul.children.length === 0) {

                  this.status.textContent = "No results found";

          this.close({ reason: "nomatches" });

        } else {
          this.open();

                  this.status.textContent = this.ul.children.length + " results found";
        }
      }
      else {
        this.close({ reason: "nomatches" });

                  this.status.textContent = "No results found";
      }
    }
  };

  // Static methods/properties

  _.all = [];

  _.FILTER_CONTAINS = function (text, input) {
    return RegExp($.regExpEscape(input.trim()), "i").test(text);
  };

  _.FILTER_STARTSWITH = function (text, input) {
    return RegExp("^" + $.regExpEscape(input.trim()), "i").test(text);
  };

  _.SORT_BYLENGTH = function (a, b) {
    if (a.length !== b.length) {
      return a.length - b.length;
    }

    return a < b? -1 : 1;
  };

  _.CONTAINER = function (input) {
    return $.create("div", {
      className: "awesomplete",
      around: input
    });
  }

  _.ITEM = function (text, input, item_id) {
    var html = input.trim() === "" ? text : text.replace(RegExp($.regExpEscape(input.trim()), "gi"), "<mark>$&</mark>");
    return $.create("li", {
      innerHTML: html,
      "role": "option",
      "aria-selected": "false",
      "id": "awesomplete_list_" + this.count + "_item_" + item_id
    });
  };

  _.REPLACE = function (text) {
    this.input.value = text.value;
  };

  _.DATA = function (item/*, input*/) { return item; };

  // Private functions

  function Suggestion(data) {
    var o = Array.isArray(data)
      ? { label: data[0], value: data[1] }
      : typeof data === "object" && "label" in data && "value" in data ? data : { label: data, value: data };

    this.label = o.label || o.value;
    this.value = o.value;
  }
  Object.defineProperty(Suggestion.prototype = Object.create(String.prototype), "length", {
    get: function() { return this.label.length; }
  });
  Suggestion.prototype.toString = Suggestion.prototype.valueOf = function () {
    return "" + this.label;
  };

  function configure(instance, properties, o) {
    for (var i in properties) {
      var initial = properties[i],
          attrValue = instance.input.getAttribute("data-" + i.toLowerCase());

      if (typeof initial === "number") {
        instance[i] = parseInt(attrValue);
      }
      else if (initial === false) { // Boolean options must be false by default anyway
        instance[i] = attrValue !== null;
      }
      else if (initial instanceof Function) {
        instance[i] = null;
      }
      else {
        instance[i] = attrValue;
      }

      if (!instance[i] && instance[i] !== 0) {
        instance[i] = (i in o)? o[i] : initial;
      }
    }
  }

  // Helpers

  var slice = Array.prototype.slice;

  function $(expr, con) {
    return typeof expr === "string"? (con || document).querySelector(expr) : expr || null;
  }

  function $$(expr, con) {
    return slice.call((con || document).querySelectorAll(expr));
  }

  $.create = function(tag, o) {
    var element = document.createElement(tag);

    for (var i in o) {
      var val = o[i];

      if (i === "inside") {
        $(val).appendChild(element);
      }
      else if (i === "around") {
        var ref = $(val);
        ref.parentNode.insertBefore(element, ref);
        element.appendChild(ref);

        if (ref.getAttribute("autofocus") != null) {
          ref.focus();
        }
      }
      else if (i in element) {
        element[i] = val;
      }
      else {
        element.setAttribute(i, val);
      }
    }

    return element;
  };

  $.bind = function(element, o) {
    if (element) {
      for (var event in o) {
        var callback = o[event];

        event.split(/\s+/).forEach(function (event) {
          element.addEventListener(event, callback);
        });
      }
    }
  };

  $.unbind = function(element, o) {
    if (element) {
      for (var event in o) {
        var callback = o[event];

        event.split(/\s+/).forEach(function(event) {
          element.removeEventListener(event, callback);
        });
      }
    }
  };

  $.fire = function(target, type, properties) {
    var evt = document.createEvent("HTMLEvents");

    evt.initEvent(type, true, true );

    for (var j in properties) {
      evt[j] = properties[j];
    }

    return target.dispatchEvent(evt);
  };

  $.regExpEscape = function (s) {
    return s.replace(/[-\\^$*+?.()|[\]{}]/g, "\\$&");
  };

  $.siblingIndex = function (el) {
    /* eslint-disable no-cond-assign */
    for (var i = 0; el = el.previousElementSibling; i++);
    return i;
  };

  // Initialization

  function init() {
    $$("input.awesomplete").forEach(function (input) {
      new _(input);
    });
  }

  // Make sure to export Awesomplete on self when in a browser
  if (typeof self !== "undefined") {
    self.Awesomplete = _;
  }

  // Are we in a browser? Check for Document constructor
  if (typeof Document !== "undefined") {
    // DOM already loaded?
    if (document.readyState !== "loading") {
      init();
    }
    else {
      // Wait for it
      document.addEventListener("DOMContentLoaded", init);
    }
  }

  _.$ = $;
  _.$$ = $$;

  // Expose Awesomplete as a CJS module
  if (typeof module === "object" && module.exports) {
    module.exports = _;
  }

  return _;

  }());

</script>
{% endblock %}
{% block body_start %}
<nav class="navbar navbar-light bg-light mb-4">
  <a class="navbar-brand" href="">Drive</a>
  <div>
    <a class="nav-link" href="/">Home</a>
  </div>
</nav>
<form id="uploadForm" action="/drive/upload" method="post" enctype="multipart/form-data">
  <div>
    <div class="form-group">
      <label>Visit Date</label>
      <input type="date" class="form-control" name="visitDate" required />
    </div>
  </div>
  <div>
    <div class="form-group">
      <label>Patient Name</label>
      <div class="input-group">
        <input class="form-control awesomplete dropdown-input" name="patientName" data-list="venkateshwar,saatvik,supriya,mammu,baba"></input>
        <div class="input-group-append">
          <button class="btn btn-outline-secondary dropdown-toggle" type="button" aria-expanded="false"></button>
        </div>
      </div>
    </div>
  </div>
  <div>
    <div class="form-group">
      <label>Ailments</label>
      <div class="input-group">
        <input class="awesomplete form-control dropdown-input" name="ailments" data-list="fever,cold,cough,headache,stomachache,skin infection" data-multiple></input>
        <div class="input-group-append">
          <button class="btn btn-outline-secondary dropdown-toggle" type="button" aria-expanded="false"></button>
        </div>
      </div>
    </div>
  </div>
  <div>
    <div class="form-group">
      <label>Hospital</label>
      <div class="input-group">
        <input class="awesomplete form-control dropdown-input" name="hospital" data-list="Safekids,Fernandez,Ankura,Butterfly,Dr Manmohan" data-multiple></input>
        <div class="input-group-append">
          <button class="btn btn-outline-secondary dropdown-toggle" type="button" aria-expanded="false"></button>
        </div>
      </div>
    </div>
  </div>
  <div>
    <div class="form-group">
      <label>Upload File</label>
      <div class="input-group">
        <div class="custom-file">
          <input type="file" id="docFile" class="custom-file-input"
            aria-describedby="inputGroupFileAddon01" name="docFile" accept=".pdf,image/*" required>
          <label class="custom-file-label" for="docFile">Choose file</label>
        </div>
      </div>
    </div>
  </div>
  <div>
    <div class="form-group">
      <label>File type</label>
      <div class="input-group">
        <input class="awesomplete form-control dropdown-input" name="fileType" data-list="prescription,bill,report" data-multiple></input>
        <div class="input-group-append">
          <button class="btn btn-outline-secondary dropdown-toggle" type="button" aria-expanded="false"></button>
        </div>
      </div>
    </div>
  </div>
  <div>
    <button class="btn btn-primary" type="submit">Upload</button>
  </div>
</form>

<div class="custom-fade" style="display: none;">
  <div class="loader"></div>
</div>
{% endblock %}

{% block body_end %}
<script>
  $(document).ready(function() {
    new Awesomplete('input[data-multiple]', {
      filter: function(text, input) {
        return Awesomplete.FILTER_CONTAINS(text, input.match(/[^,]*$/)[0]);
      },

      item: function(text, input) {
        return Awesomplete.ITEM(text, input.match(/[^,]*$/)[0]);
      },

      replace: function(text) {
        var before = this.input.value.match(/^.+,\s*|/)[0];
        this.input.value = before + text + ", ";
      }
    });

    $('input.dropdown-input').each((i, elem) => {
      const $elem = $(elem);
      const comboplete = new Awesomplete(elem, {
        minChars: 0,
      });

      const dropdownToggle = $elem.parents('.input-group').find('.dropdown-toggle')[0];
      
      dropdownToggle.addEventListener("click", function() {
        if (comboplete.ul.childNodes.length === 0) {
          comboplete.minChars = 0;
          comboplete.evaluate();
          comboplete.input.focus();
        }
        else if (comboplete.ul.hasAttribute('hidden')) {
          comboplete.open();
          comboplete.input.focus();
          return;
        }
        else {
          comboplete.close();
        }
      });
    })

    $(document.body).on('change', '#docFile', (e) => {
      $('.custom-file-label').html(e.currentTarget.value.match(/[^\\]+$/)[0]);
    })

    $('form').submit(function(event) {
      event.preventDefault();

      const formData = new FormData($('form')[0]);
      $('.custom-fade').show();
      $.ajax({
        url: '/drive/upload',
        type: 'POST',
        data: formData,
        processData: false,
        contentType: false,
        success: function(data) {
          $('.custom-fade').hide();
          Swal.fire(
            'Success!',
            'Uploaded successfully!',
            'success'
          )
          console.log('File uploaded successfully.');
        },
        error: function(jqXHR, textStatus, errorThrown) {
          $('.custom-fade').hide();
          Swal.fire(
            'Error',
            'Something went wrong',
            'error'
          )
          console.error('Error uploading file: ' + errorThrown);
        }
      });
    });
  });
</script>
{% endblock %}
